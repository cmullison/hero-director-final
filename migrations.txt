CREATE TABLE user ( id TEXT PRIMARY KEY, name TEXT, email TEXT UNIQUE NOT NULL, emailVerified BOOLEAN DEFAULT FALSE, image TEXT, password TEXT, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL );

CREATE TABLE session ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, token TEXT UNIQUE NOT NULL, expiresAt TEXT NOT NULL, ipAddress TEXT, userAgent TEXT, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE );

CREATE TABLE user_conversations ( id TEXT PRIMARY KEY, createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, userId TEXT NOT NULL, userName TEXT, agentName TEXT, sessionId TEXT, sessionIpAddress TEXT, sessionUserAgent TEXT, conversationStart TEXT NOT NULL, lastSaved TEXT NOT NULL, messageCount INTEGER NOT NULL, messages_json TEXT NOT NULL, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE, FOREIGN KEY (sessionId) REFERENCES session(id) ON DELETE SET NULL );

CREATE TABLE code_blocks ( id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, language TEXT, code TEXT NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, updated_at DATETIME DEFAULT CURRENT_TIMESTAMP );

CREATE TABLE profile ( id INTEGER PRIMARY KEY AUTOINCREMENT, user_id TEXT NOT NULL UNIQUE, name TEXT, bio TEXT, phone TEXT, location TEXT, website TEXT, twitter TEXT, instagram TEXT, linkedin TEXT, github TEXT, avatar_url TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );

CREATE TABLE [agent_memory] ("id" text PRIMARY KEY,"conversation_id" text,"user_id" text,"label" text,"createdat" text,"updatedat" text,"agent_name" integer);

CREATE TABLE files ( id TEXT PRIMARY KEY, userId TEXT NOT NULL REFERENCES user(id) ON DELETE CASCADE, projectId TEXT, name TEXT NOT NULL, type TEXT NOT NULL CHECK (type IN ('file', 'folder')), parentId TEXT REFERENCES files(id) ON DELETE CASCADE, path TEXT NOT NULL, collaboratorsJson TEXT, codeBody TEXT NOT NULL, version TEXT, createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(userId, parentId, name) );

CREATE TABLE project ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, name TEXT NOT NULL, description TEXT, collaboratorsJson TEXT, createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, updatedAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE );

CREATE TABLE saved_sessions ( id TEXT PRIMARY KEY, user_id TEXT, session_name TEXT, agent_type TEXT, created_at DATETIME, last_accessed DATETIME, mcp_servers JSON, metadata JSON );

CREATE TABLE teams ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, owner_id TEXT NOT NULL, image_url TEXT, description TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );

CREATE TABLE team_members ( id INTEGER PRIMARY KEY AUTOINCREMENT, team_id INTEGER NOT NULL, user_id TEXT NOT NULL, role TEXT NOT NULL DEFAULT 'member', 'owner', 'admin', 'member', joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE, UNIQUE(team_id, user_id) );

CREATE TABLE d1_migrations( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT UNIQUE, applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL );

CREATE TABLE video_jobs ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, prompt TEXT NOT NULL, model TEXT NOT NULL DEFAULT 'google/veo-3', aspect_ratio TEXT DEFAULT '16:9', seed INTEGER, status TEXT NOT NULL DEFAULT 'pending', replicate_prediction_id TEXT, video_url TEXT, error_message TEXT, settings TEXT, createdAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, updatedAt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, completedAt TEXT, r2_url TEXT, save_status TEXT, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE );

CREATE TABLE github_integration ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, githubUserId TEXT NOT NULL, githubUsername TEXT NOT NULL, accessToken TEXT NOT NULL, refreshToken TEXT, scope TEXT NOT NULL, tokenType TEXT NOT NULL, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, isActive BOOLEAN NOT NULL DEFAULT true, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE, UNIQUE(userId, githubUserId) );

CREATE TABLE github_repository ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, githubRepoId TEXT NOT NULL, name TEXT NOT NULL, fullName TEXT NOT NULL, description TEXT, isPrivate BOOLEAN NOT NULL DEFAULT false, defaultBranch TEXT NOT NULL, htmlUrl TEXT NOT NULL, cloneUrl TEXT NOT NULL, sshUrl TEXT NOT NULL, language TEXT, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, lastSyncedAt TEXT NOT NULL, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE, UNIQUE(userId, githubRepoId) );

CREATE TABLE chats ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, title TEXT, model TEXT NOT NULL DEFAULT 'gpt-4o-mini', createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE );

CREATE TABLE messages ( id TEXT PRIMARY KEY, chatId TEXT NOT NULL, role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'system', 'tool')), content TEXT NOT NULL, toolInvocations TEXT, createdAt TEXT NOT NULL, FOREIGN KEY (chatId) REFERENCES chats(id) ON DELETE CASCADE );

CREATE TABLE "chat_attachments" ( id TEXT PRIMARY KEY, messageId TEXT, chatId TEXT NOT NULL, userId TEXT NOT NULL, fileName TEXT NOT NULL, fileType TEXT NOT NULL, fileSize INTEGER NOT NULL, r2Key TEXT NOT NULL, r2Url TEXT NOT NULL, uploadedAt TEXT NOT NULL, FOREIGN KEY (messageId) REFERENCES messages(id) ON DELETE CASCADE, FOREIGN KEY (chatId) REFERENCES chats(id) ON DELETE CASCADE, FOREIGN KEY (userId) REFERENCES user(id) ON DELETE CASCADE );

CREATE TABLE google_video_jobs ( id TEXT PRIMARY KEY, userId TEXT NOT NULL, prompt TEXT NOT NULL, aspectRatio TEXT NOT NULL DEFAULT '16:9', personGeneration TEXT NOT NULL DEFAULT 'allow', status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')), google_operation_name TEXT, video_url TEXT, error_message TEXT, createdAt TEXT NOT NULL, updatedAt TEXT NOT NULL, completedAt TEXT, FOREIGN KEY (userId) REFERENCES user(id) );

CREATE INDEX idx_user_email ON user(email);
CREATE INDEX idx_session_token ON session(token);
CREATE INDEX idx_session_user ON session(userId);
CREATE INDEX idx_session_expires ON session(expiresAt);

CREATE INDEX idx_uc_userId ON user_conversations(userId);
CREATE INDEX idx_uc_conversationStart ON user_conversations(conversationStart);
CREATE INDEX idx_uc_agentName ON user_conversations(agentName);
CREATE INDEX idx_uc_lastSaved ON user_conversations(lastSaved);

CREATE INDEX idx_profile_user_id ON profile (user_id);

CREATE INDEX idx_files_parentId ON files(parentId);
CREATE INDEX idx_files_userId ON files(userId);

CREATE INDEX idx_project_userId ON project(userId);
CREATE INDEX idx_project_createdAt ON project(createdAt);
CREATE INDEX idx_project_updatedAt ON project(updatedAt);

CREATE INDEX idx_teams_owner_id ON teams (owner_id);
CREATE INDEX idx_team_members_team_id ON team_members (team_id);
CREATE INDEX idx_team_members_user_id ON team_members (user_id);

CREATE INDEX idx_video_jobs_userId ON video_jobs(userId);
CREATE INDEX idx_video_jobs_status ON video_jobs(status);
CREATE INDEX idx_video_jobs_createdAt ON video_jobs(createdAt);
CREATE INDEX idx_video_jobs_replicate_id ON video_jobs(replicate_prediction_id);

CREATE INDEX idx_github_integration_userId ON github_integration(userId);
CREATE INDEX idx_github_integration_githubUserId ON github_integration(githubUserId);
CREATE INDEX idx_github_integration_isActive ON github_integration(isActive);
CREATE INDEX idx_github_repository_userId ON github_repository(userId);
CREATE INDEX idx_github_repository_githubRepoId ON github_repository(githubRepoId);
CREATE INDEX idx_github_repository_fullName ON github_repository(fullName);

CREATE INDEX idx_chats_userId ON chats(userId);
CREATE INDEX idx_chats_createdAt ON chats(createdAt);
CREATE INDEX idx_messages_chatId ON messages(chatId);
CREATE INDEX idx_messages_createdAt ON messages(createdAt);
<null>
CREATE INDEX idx_chat_attachments_messageId ON chat_attachments(messageId);
CREATE INDEX idx_chat_attachments_chatId ON chat_attachments(chatId);
CREATE INDEX idx_chat_attachments_userId ON chat_attachments(userId);
CREATE INDEX idx_chat_attachments_uploadedAt ON chat_attachments(uploadedAt);

CREATE INDEX idx_google_video_jobs_userId ON google_video_jobs(userId);
CREATE INDEX idx_google_video_jobs_status ON google_video_jobs(status);
CREATE INDEX idx_google_video_jobs_createdAt ON google_video_jobs(createdAt);



